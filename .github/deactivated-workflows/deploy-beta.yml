name: Publish Beta Release
run-name: Publish Beta Release (${{ github.ref_name }})
# This workflow will run on every push containing a tag, that is matching version naming
# If the app builds and passes tests, it will release to the production channel (Docker's 'latest' tag, npm release...)

on: 
  push:
    tags-ignore:
      - '**'

# Just a roll-up with the max permissions / handled on job level
permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  build-workflow:
    name: Build
    uses: ./.github/workflows/build.yml
    with:
      fullBuild: true
      fullTest: true
    secrets: inherit
    permissions: {}

  publish-docker:
    name: Publish Docker Image
    needs: build-workflow
    runs-on: ubuntu-latest
    environment: 
      name: production
      url: https://hub.docker.com/r/${{env.DOCKER_USERNAME}}/${{github.event.repository.name}}
    permissions: {}
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: docker-artifacts
      - name: Load Docker Username
        run: echo "DOCKER_USERNAME=$(cat ./.docker-username)" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PWD }}
      - name: Load & Tag Docker Image
        run: |
          docker load --input ./docker-image.tar.gz
          docker image tag ${{github.event.repository.name}} $DOCKER_USERNAME/${{github.event.repository.name}}:nightly
          docker image tag ${{github.event.repository.name}} $DOCKER_USERNAME/${{github.event.repository.name}}:latest
          docker image tag ${{github.event.repository.name}} $DOCKER_USERNAME/${{github.event.repository.name}}:${{github.ref_name}}
      - name: Push Docker Image
        run: docker image push --all-tags $DOCKER_USERNAME/${{github.event.repository.name}}
      - name: Update DockerHub readme
        uses: peter-evans/dockerhub-description@v3
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PWD }}
          repository: ${{env.DOCKER_USERNAME}}/${{github.event.repository.name}}
          short-description: ${{ github.event.repository.description }}
          readme-filepath: ./README.md

  publish-npm:
    name: Publish npm
    needs: build-workflow
    runs-on: ubuntu-latest
    environment: 
      name: production
      url: https://www.npmjs.com/package/${{github.event.repository.name}}
    permissions: {}
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: app-artifacts
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version-file: './.node-version'
          cache: 'npm'
          cache-dependency-path: ./
      - name: Prepare environment
        run: npm ci
      - uses: JS-DevTools/npm-publish@v1
        with:
          token: ${{ secrets.NPM_TOKEN }}
  
  publish-gh-pages:
    name: Publish GH Pages
    needs: build-workflow
    runs-on: ubuntu-latest
    environment:
      name: production
      url: ${{steps.deployment.outputs.page_url}}
    permissions:
      contents: read
      pages: write
      id-token: write
    steps:
      - name: Setup Pages
        uses: actions/configure-pages@v3
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1
  
  publish-wiki:
    name: Publish GitHub Wiki
    needs: build-workflow
    runs-on: ubuntu-latest
    environment: 
      name: production
      url: https://github.com/steilerDev/icloud-photos-sync/wiki
    permissions: {}
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: gh-wiki-artifacts
      - name: Upload Documentation to Wiki
        uses: SwiftDocOrg/github-wiki-publish-action@v1
        with:
          path: ./doc
        env:
          GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}

  create-gh-release:
    name: Create GH Release
    needs: build-workflow
    runs-on: ubuntu-latest
    environment: 
      name: production
      url: https://github.com/steilerDev/icloud-photos-sync/releases/tag/${{github.ref_name}}
    permissions:
      contents: write
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./artifacts
      - name: Prepare artifacts
        run: tar -C ./artifacts -czf ./icloud-photos-sync.${{github.ref_name}}.tar.gz ./
      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          bodyFile: ./artifacts/changelog/CHANGELOG.latest.md
          tag: ${{github.ref_name}}
          artifacts: ./icloud-photos-sync.${{github.ref_name}}.tar.gz