name: version-bump
description: Version bumps the repository respecting the release process of this project
inputs:
  app-path:
    description: The path to the app directory
    required: false
    default: app
  version-bump-type:
    description: |
      The type of version bump: 
      <major> to move to the next major-nightly version
      <minor> to move to the next minor-nightly version
      <patch> to move to the next patch-nightly version
      <nightly> to move the current version onto the nightly release channel, or increment the current nightly version
      <beta> to move the current version onto the beta release channel, or increment the current beta version
      <production> to move the current version onto the production release channel, or increment the patch version
    required: true
outputs:
  new-version:
    description: "The bumped version string"
    value: ${{ steps.get-bumped-version.outputs.bumped-version }}
runs:
  using: composite
  steps:
    - id: setup-node
      uses: actions/setup-node@v3
    - id: setup-version-bump
      shell: bash
      run: npm install -g @jsdevtools/version-bump-prompt
    - id: perform-beta-bump
      shell: bash
      run: |
        case "${{ inputs.version-bump-type }}" in
          'major')
            COMMAND="premajor --preid nightly"
            ;;

          'minor')
            COMMAND="preminor --preid nightly"
            ;;

          'patch')
            COMMAND="prepatch --preid nightly"
            ;;
          
          'nightly')
            COMMAND="prerelease --preid nightly"
            ;;

          'beta')
            COMMAND="prerelease --preid beta"
            ;;

          'production')
            COMMAND="patch"
            ;;

          *)
            echo "Unsupported command: ${{ inputs.version-bump-type }}"
            exit 1
            ;;
        esac

        (cd ${{ inputs.app-path }}; bump $COMMAND ../CHANGELOG.md src/lib/package.ts package.json)
        (cd ${{ inputs.app-path }}; npm install)
    - id: get-bumped-version
      shell: bash
      run: echo "bumped-version=$(cat ${{inputs.app-path}}/package.json | jq -r .version)" >> $GITHUB_OUTPUT
    - id: validate
      shell: bash
      run: |
        echo "########################################"
        echo "########################################"
        echo "########################################"
        cat CHANGELOG.md
        echo "########################################"
        echo "########################################"
        echo "########################################"
        cat app/src/lib/package.ts 
        echo "########################################"
        echo "########################################"
        echo "########################################"
        cat app/package.json
        echo "########################################"
        echo "########################################"
        echo "########################################"
        cat app/package-lock.json
      